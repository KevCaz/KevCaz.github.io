<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R on KevCaz's Website</title><link>https://kevcaz.github.io/tags/r/</link><description>Recent content in R on KevCaz's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Content under CC0 1.0 Universal unless otherwise specified.</copyright><lastBuildDate>Thu, 14 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kevcaz.github.io/tags/r/index.xml" rel="self" type="application/rss+xml"/><item><title>A new tree file for my notes</title><link>https://kevcaz.github.io/notes/2024/03/2023-03-07_a_new_tree/</link><pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2024/03/2023-03-07_a_new_tree/</guid><description>Context This section of my website is where I jot down notes that will be useful to my future self and hopefully to others. For years my notes have been organized into a set of folders that serve as categories that I thought were relevant. After 5 years and &amp;gt;120 notes, I realized that the categories were somewhat contrived (e.g. cli, linux), and that it was hard to locate a post and the assets were now managed consistently.</description></item><item><title>rcites 1.3.0</title><link>https://kevcaz.github.io/notes/2023/02/2023-02-19_rcites_1_3/</link><pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2023/02/2023-02-19_rcites_1_3/</guid><description>rcites 1.3.0 is now available on CRAN üéâ. This was mainly a maintenance release following up on a recent issue in vcr (see Overview of fixes for upcoming v1.2) but I also took the opportunity to improve the set_token() function. Now the user has up to five attempts to set up the token when set_token() is called, after that error is triggered (previously the error was triggered after the first failed attempt).</description></item><item><title>rmangal 2.1.2</title><link>https://kevcaz.github.io/notes/2023/01/2023-01-31_rmangal_2_1/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2023/01/2023-01-31_rmangal_2_1/</guid><description>A new release of rmangal is now available on CRAN. Following up on a recent issue in vcr (see ' Overview of fixes for upcoming v1.2&amp;rsquo; for more details), I decided to have fixtures written in JSON rather than in YAML, the change was pretty straightforward
1 2 3 4 5 6 7 # see tests/testthat/setup-rmangal.R # in https://github.com/ropensci/rmangal/commit/9a2293d75b8af7f4b856e024dc8760f97d349e50#diff-ab9aa624c8da203a8b11856c8203c5de205fa4cabceb048838c965106a3d406f vcr::vcr_configure( dir = &amp;#34;../fixtures&amp;#34;, write_disk_path = &amp;#34;../files&amp;#34;, serialize_with = &amp;#34;json&amp;#34; ) instead of</description></item><item><title>R packages rmangal and rcites updated on CRAN</title><link>https://kevcaz.github.io/notes/2021/11/2021-11-25_r_packages_rmangal/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2021/11/2021-11-25_r_packages_rmangal/</guid><description>Over the past few weeks, I took some time to review the unit tests for rmangal and rcites. Both packages are R clients for web APIs:
rmangal allows users to search ecological interactions available in the Mangal database; rcites allows users to query the Species+ database by leveraging the Speciesplus/CITES Checklist API. One of the main challenges with such packages is to not get archived on CRAN üò±! rmangal was actually archived a year ago for policy violation on internet access, and so one of my main goals was to get it back on CRAN.</description></item><item><title>Renaming files with `mv`, `rename` and `R`</title><link>https://kevcaz.github.io/notes/2020/09/2020-09-08_renaming_files_with/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/09/2020-09-08_renaming_files_with/</guid><description>For a project I have been working on for quite some time now, I ended up handling thousands of files and as I initially named them poorly, I had to rename a bunch of them&amp;hellip; Basically, I needed to do two kind of file name manipulations.
problem 1 is kind of trivial : replacing the same part of the file names by another, e.g. renaming res_old1_001.txt, res_old1_002.txt, &amp;hellip;, res_old1_010.txt to res_new2_001.</description></item><item><title>Beware of `apply()` outputs!</title><link>https://kevcaz.github.io/notes/2020/07/2020-07-01_beware_of_apply/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/07/2020-07-01_beware_of_apply/</guid><description>I have been frequently using apply() for years now, quite happily. But yesterday, I was surprised by how apply() works and in this note I&amp;rsquo;ll try to explaining why.
Let&amp;rsquo;s consider the following data frame.
1 R&amp;gt; df0 &amp;lt;- data.frame(v1 = letters[1:3], v2 = 1:3) And let&amp;rsquo;s assume I need to convert all columns, irrespective of their class, to columns of character strings (this example is somewhat contrived, but illustrates well the issue).</description></item><item><title>Deploy a pkgdown website on gh-pages manually</title><link>https://kevcaz.github.io/notes/2020/04/2020-04-12_deploy_a_pkgdown/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/04/2020-04-12_deploy_a_pkgdown/</guid><description>This is another note about deploying a pkgdown1 website with Travis on gh-pages. I had previously used the package travis but I was recently interested in doing so manually. Fortunately, I found this very helpful walk-through by G√°bor Cs√°rdi2. I used it and it worked well for a while, but at some point I had an issue with the deployment part (still not sure why), so I changed it. Instead of using the following config3</description></item><item><title>Generate a ssh key with R</title><link>https://kevcaz.github.io/notes/2020/04/2020-04-04_generate_a_ssh/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/04/2020-04-04_generate_a_ssh/</guid><description>I now frequently use GitHub actions to deploy websites on gh-pages. One way to do so requires to use a ssh key (the full procedure is well explained, inter alia, in the README of peaceiris/actions-gh-pages). As I am used to work with the Terminal, when I need such a key, I use the following command line:
1 $ ssh-keygen -t rsa -b 4096 -C &amp;#34;$(git config user.email)&amp;#34; -f gh-pages -N &amp;#34;&amp;#34; which generates two files:</description></item><item><title>Count your lines of code with `cloc`</title><link>https://kevcaz.github.io/notes/2020/02/2020-02-09_count_your_lines/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/02/2020-02-09_count_your_lines/</guid><description>I recently found out about cloc that is a very useful command line tool written in Perl that &amp;ldquo;counts blank lines, comment lines, and physical lines of source code in many programming languages&amp;rdquo;1. Let&amp;rsquo;s see how it works üëÅ.
The first step is to install cloc, there are several ways to do so, as a Debian user (Debian Buster) all I had to do was to use apt-get:
1 $ apt-get install cloc Once installed, cloc can be call in a Terminal like so: cloc path/to/file_or_folder.</description></item><item><title>Retrieve a list of publications available from an ORCID account with R</title><link>https://kevcaz.github.io/notes/2019/11/2019-11-10_retrieve_a_list/</link><pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/11/2019-11-10_retrieve_a_list/</guid><description>ORCID is a great initiative that provides a unique identifier for researchers (akin to a DOI but for people). In my opinion, the two main/direct benefits from having an ORCID account are:
a web page with details about researcher background and publication (see mine at https://orcid.org/0000-0001-6619-9874 and check out this previous note on the topic);
an ORCID account can be used to log in the web interfaces of various scientific journals so that research have a centralized login and personal details for various journals (see the log in page of Global Ecology and Biogeography as an example ‚¨áÔ∏è).</description></item><item><title>Deploy a pkgdown on gh-pages</title><link>https://kevcaz.github.io/notes/2019/10/2019-10-22_deploy_a_pkgdown/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/10/2019-10-22_deploy_a_pkgdown/</guid><description>There are three ways to deploy a website on your GitHub pages :
using the gh-pages; using the folder docs on your master branch; using the master branch. I frequently use the GitHub pages to deploy the pkgdown websites I create for my R packages. For a while, I was using the docs/ folder where the website is generated by default. But I figured that this way has two main drawbacks:</description></item><item><title>rmangal `[REDIRECT]`</title><link>https://kevcaz.github.io/notes/2019/10/2019-10-22_rmangal_redirect/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/10/2019-10-22_rmangal_redirect/</guid><description>A very short note to mention that yesterday Steve Vissault and I published a post on rOpenSci about rmangal üîó. In a nutshell rmangal is an R client for the Mangal database that includes &amp;gt; 1300 ecological networks. Check out the cool poster Steve created.</description></item><item><title>R-3.6.1 on Ubuntu Bionic</title><link>https://kevcaz.github.io/notes/2019/09/2019-09-11_r_3_6/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/09/2019-09-11_r_3_6/</guid><description>As detailed in this post, I recently installed Ubuntu on my old MacBookPro (assuming a MacBookPro from mid-2012 is old üòè). In order to run some simulations I needed to install the latest version of R. I first followed the procedure to install the latest R on Debian before realizing that the backport for Ubuntu are different üòÅ! So if you are on Ubuntu, the correct link to install the latest R is here.</description></item><item><title>A simple yet powerful unit converter with R</title><link>https://kevcaz.github.io/notes/2019/08/2019-08-06_a_simple_yet/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/08/2019-08-06_a_simple_yet/</guid><description>I always forget how to convert Fahrenheit to Celsius and conversely, which I find very frustrating &amp;ndash; for the record the current definition is:
$$T(¬∞F) = T(¬∞C)\frac{9}{5}+32$$
Yesterday, after looking for the umpteenth times the above equation I decided to create a small function that would handle the conversion. I first thought that I could create a 2-lines function just for this specific unit conversion when I realize that there is a R üì¶ dedicated to units manipulation: units that depends on the C library libdunits2 and is required to install üì¶ sf.</description></item><item><title>Variables in mathematical expressions in a plot with R</title><link>https://kevcaz.github.io/notes/2019/08/2019-08-02_variables_in_mathematical/</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/08/2019-08-02_variables_in_mathematical/</guid><description>It is rather straightforward to add mathematical annotation in a plot with R. However, I have noted that people struggle with the two following :
combining mathematical expression and text; using variables&amp;rsquo; values within an expression. The first one is actually easy, you just need to add and quotation marks to add text in expression and to use * to concatenate elements.
1 2 plot(c(0,1), c(0,1), type = &amp;#34;n&amp;#34;) text(0.5, .</description></item><item><title>Upgrading to R.3.6.0 on Debian Buster</title><link>https://kevcaz.github.io/notes/2019/06/2019-06-26_upgrading_to_r/</link><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/06/2019-06-26_upgrading_to_r/</guid><description>Since March of this year, Debian Buster (Debian 10) has been frozen and has become the new stable release and for this reason the installation of R 3.6.0 (available since April 26th) on Buster requires the backports kindly provided by Johannes Ranke. Yesterday, I decided to install R 3.6.0 on my computer, so I used them, which basically means that:
I appended deb http://cran.wu.ac.at/bin/linux/debian buster-cran35/ to /etc/apt/sources.list; I added the key to configure the secure apt.</description></item><item><title>inSilecoMisc v0.2.0</title><link>https://kevcaz.github.io/notes/2019/06/2019-06-21_insilecomisc_v0_2/</link><pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/06/2019-06-21_insilecomisc_v0_2/</guid><description>For 3 years now, I have been maintaining a small R üì¶ named inSilecoMisc that includes a set of of handy functions. As time goes, my skills evolves (hopefully in a good direction) and so does the content of these packages: I had function that suit my new needs, I realize that some functions I wrote are (better) coded elsewhere, I rewrite functions to make then more intuitive and I improve the documentation.</description></item><item><title>Sent your R package to package builder via devtools</title><link>https://kevcaz.github.io/notes/2019/05/2019-05-23_sent_your_r/</link><pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/05/2019-05-23_sent_your_r/</guid><description>As I was sending a minor patch to rcites, I use devtools::build_win() and got the following warning message:
Warning message: &amp;#39;devtools::build_win&amp;#39; is deprecated. And the message suggested to check out check_win_*, and I so did a quick check:
1 R&amp;gt; devtools::check once tab typed, the following function names were prompted:
1 2 3 4 devtools::check_built devtools::check_cran devtools::check_win_oldrelease devtools::check_man devtools::check devtools::check_win_release devtools::check_win_devel devtools::check_dep_version devtools::check_failures devtools::check_rhub We now have access to rhub via devtools, that&amp;rsquo;s neat üéÜ!</description></item><item><title>rgeos v0.4-2</title><link>https://kevcaz.github.io/notes/2019/02/2019-02-02_rgeos_v0_4/</link><pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/02/2019-02-02_rgeos_v0_4/</guid><description>As explained in a previous note, a few weeks ago I was not able to install rgeos version 0.4-1. I ran into a new issue today and I decided to figure out what was wrong with it. After a quick search, I found this answer on and it turned out that all I needed was to install libgeos++-dev and so I did:
sudo apt install libgeos++-dev After that the command:</description></item><item><title>Get docker on Debian Testing</title><link>https://kevcaz.github.io/notes/2019/01/2019-01-07_get_docker_on/</link><pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/01/2019-01-07_get_docker_on/</guid><description>One of my resolutions for 2019 is to use docker to delve deeper into reproducible science. As explained in the Wikipedia&amp;rsquo;s article about docker:
Docker is a computer program that performs operating-system-level virtualization, also known as &amp;ldquo;containerization&amp;rdquo;.
Basically, instead of installing software in a way that very much likely depends on the Operating System (OS) you are using, you install docker (OS specific) and then you run command lines (not OS specific) to install the set of containers (software) you need.</description></item><item><title>How many `&amp;` or `|` ?</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-21_how_many_or/</link><pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-21_how_many_or/</guid><description>Recently, I reviewed a paper that introduces a package, so I reviewed the code and noticed that the authors often used &amp;amp;&amp;amp; (and) and || (or) whereas only &amp;amp; and | were required. I guess this is due to:
other programming language; the fact that for vectors of one element in R &amp;amp; and &amp;amp;&amp;amp; are equivalent (same for | and ||). Regarding point 1, we could take C as an example.</description></item><item><title>Find the Coordinate Reference System (CRS) you need</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-20_find_the_coordinate/</link><pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-20_find_the_coordinate/</guid><description>For the manipulation of spatial objects and spatial analyses, I mainly use R, meaning that I use R packages that turn R into a powerful Geographic Information System (GIS). Before 2017, I was using sp, rgdal, rgeos for vector objects and raster for raster objects. Now I use a combination of sf (created to replace sp, rgoes and rgdal), raster and sf and mapview.
One of the most common manipulation is to convert coordinates (see sf::st_transform() in raster::projectRaster()).</description></item><item><title>A bug in the command wrapper of r-core-base 3.5.1-1+b2</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-18_a_bug_in/</link><pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-18_a_bug_in/</guid><description>Today, as I working on a post, I got this issue when using the R command wrapper:
1 2 3 $ Rscript --no-site-file -e &amp;#39;blogdown::serve_site()&amp;#39; /usr/lib/R/bin/R: line 193: /usr/bin/sed: No such file or directory ERROR: option &amp;#39;-e&amp;#39; requires a non-empty argument I did not understand what happened so I decided to google it! The bug was already identified and reported üòÑ. A side note to mention that several packages now imports callr (for instance pkgdown) and as it uses the R command wrapper (if I understand correctly) the current bug actually affects several different packages.</description></item><item><title>The number of dependencies</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-16_the_number_of/</link><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-16_the_number_of/</guid><description>I was looking at some issues on GitHub when I found this example provided by Dirk Eddelbuettel to evaluate the number of species of a dependencies of a package. I decided to experiment a little bit package_dependencies().
1 2 3 4 R&amp;gt; library(tools) R&amp;gt; ap &amp;lt;- available.packages() R&amp;gt; nrow(ap) # nb available package [1] 13385 Retrieve the packages rcites depends on:
1 2 3 4 R&amp;gt; rc &amp;lt;- tools::package_dependencies(&amp;#34;rcites&amp;#34;, ap, &amp;#34;Imports&amp;#34;) R&amp;gt; rc $rcites [1] &amp;#34;httr&amp;#34; &amp;#34;jsonlite&amp;#34; &amp;#34;data.</description></item><item><title>Clip, but crop first!</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-10_clip_but_crop/</link><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-10_clip_but_crop/</guid><description>I often clip raster in R, with sf and raster it is straightforward and efficient. That said, I&amp;rsquo;d like to mention one tip tip R users that clip should be aware of: cropping before clipping. It does significantly improve the performance, as shown in the R script below:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 library(sf) library(raster) library(tidyverse) ## download Canada boundaries (level of the county) ont &amp;lt;- getData(&amp;#34;GADM&amp;#34;, country = &amp;#34;CAN&amp;#34;, level = 2) %&amp;gt;% st_as_sf %&amp;gt;% filter(NAME_1 == &amp;#34;Ontario&amp;#34;) ## Download elevation raster (NB resolution is coarse) can_elv &amp;lt;- getData(&amp;#34;alt&amp;#34;, country = &amp;#34;CAN&amp;#34;) R&amp;gt; system.</description></item><item><title>`sf` is fast</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-09_sf_is_fast/</link><pubDate>Fri, 09 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-09_sf_is_fast/</guid><description>sf have become the new standard to read, manipulate, write vector files in R. I recently had a 1.6GB shapefiles that I needed to open
1 2 3 4 5 $ du geodata/* 717M geodata/OHN_WATERBODY.dbf 4.0K geodata/OHN_WATERBODY.prj 1.6G geodata/OHN_WATERBODY.shp 11M geodata/OHN_WATERBODY.shx and I was wondering about how much time it would take for sf to open it, and it was pretty fast üöÄ
1 2 3 4 5 6 7 8 9 10 11 12 13 R&amp;gt; system.</description></item><item><title>Something wrong with rgeos 0.4-1?</title><link>https://kevcaz.github.io/notes/2018/11/2018-11-07_something_wrong_with/</link><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/11/2018-11-07_something_wrong_with/</guid><description>The last update of rgeos (version 0.4-1) was released on October 19th, 2018 and with my current R set up:
1 2 3 4 R&amp;gt; sessionInfo() R version 3.5.1 (2018-07-02) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Debian GNU/Linux buster/sid I got the following error:
1 2 3 4 5 6 7 8 checking geos_c.h presence and usability... yes checking geos: linking with libgeos_c... no /usr/bin/ld: cannot find -lgeos collect2: error: ld returned 1 exit status configure: Install failure: compilation and/or linkage problems.</description></item><item><title>Make your conditional statements efficient!</title><link>https://kevcaz.github.io/notes/2018/10/2018-10-30_make_your_conditional/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/10/2018-10-30_make_your_conditional/</guid><description>Recently, I was looking at an R function and found a if statement that looks something like this:
1 2 3 if (length(which(names(df) == &amp;#34;entry&amp;#34;)) &amp;gt; 0) { # [...] } I guess this is common way of doing it as it matches well with a way of looking at the problem: &amp;ldquo;if I want to test the presence of a column &amp;ldquo;entry&amp;rdquo; in a data frame (df), I can check if there is more at least one name that match &amp;ldquo;entry&amp;rdquo;.</description></item><item><title>Mind your object and shared object files!</title><link>https://kevcaz.github.io/notes/2018/10/2018-10-17_mind_your_object/</link><pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/10/2018-10-17_mind_your_object/</guid><description>Rcpp profoundly changed the R landscape. Basically, it made all performance bottlenecks vanish and I&amp;rsquo;m not surprised that so many packages are now using it:
As of May 2017, 1026 packages on CRAN and a further 91 on BioConductor deploy Rcpp to extend R. (www.rcpp.org - October 17, 2018)
Even people that do not know nothing about Rcpp are likely to use it on a regular basis as most packages for data science are now linked to Rcpp (e.</description></item><item><title>rcites code coverage dropped to 0</title><link>https://kevcaz.github.io/notes/2018/10/2018-10-09_rcites_code_coverage/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/10/2018-10-09_rcites_code_coverage/</guid><description>We (a couple of colleagues and myself) are currently finishing a major release for our R package rcites. After adding the latest feature I have been working on via a pull request, I messed up with my local master branch and overwrite/delete some files üò†. I thought it was not a big deal as all of them were files created/edited when the package is built (well, I thought so). But after the very next push, the code coverage weirdly dropped to zero üò±.</description></item><item><title>Let AppVeyor watch inSileco!</title><link>https://kevcaz.github.io/notes/2018/10/2018-10-02_let_appveyor_watch/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/10/2018-10-02_let_appveyor_watch/</guid><description>I very much enjoy sharing thoughts and code on our blog inSileco. Recently, one of the authors mentioned that he was not able to clone the repository on his Windows machine. I came to realize that we better not assume that everybody is working on MacOS or Linux and check that inSileco works well on Windows. One of the most convenient way to do so is to use AppVeyor and I therefore decided to spend some time making the build passed on AppVeyor!</description></item></channel></rss>