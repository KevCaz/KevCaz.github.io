<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julia on KevCaz's Website</title><link>https://kevcaz.github.io/tags/julia/</link><description>Recent content in Julia on KevCaz's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Content under CC0 1.0 Universal unless otherwise specified.</copyright><lastBuildDate>Wed, 16 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kevcaz.github.io/tags/julia/index.xml" rel="self" type="application/rss+xml"/><item><title>Some Julia language elements to keep in mind</title><link>https://kevcaz.github.io/notes/2023/08/2023-08-16_some_julia_language/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2023/08/2023-08-16_some_julia_language/</guid><description>As I am jumping on a project where I will code mainly in Julia, I thought it was worth spending some time to remind myself about core Julia&amp;rsquo;s features. I have already spent some reading reading Julia&amp;rsquo;s documentation which is great and definitively worth reading, but I was looking for something shorter and found &amp;lsquo;Julia language: a concise tutorial&amp;rsquo; (Github repository available here), which by the way is listed in the Julia tutorials page.</description></item><item><title>Matplotlib could not be imported by pyimport `[SOLVED]`</title><link>https://kevcaz.github.io/notes/2021/11/2021-11-23_matplotlib_could_not/</link><pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2021/11/2021-11-23_matplotlib_could_not/</guid><description>I have been experiencing an issue following a recent Python update. Basically, when I was trying to use PyPlot, I got the following message error.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 julia&amp;gt; using PyPlot ERROR: InitError: PyError (PyImport_ImportModule The Python package matplotlib could not be imported by pyimport.</description></item><item><title>Running parallel simulations with scripts that take two or more varying parameters</title><link>https://kevcaz.github.io/notes/2020/08/2020-08-20_running_parallel_simulations/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/08/2020-08-20_running_parallel_simulations/</guid><description>Another note about how I work with Slurm! Today, I comment on three strategies to run simulations for which the values taken by two arguments (or more) vary from one simulation to another.
The problem Let&amp;rsquo;s assume that we run simulations by calling a Julia script myscript.jl that takes p1 as argument, in order to run the simulation on one CPU for a single simulation, I would run the following bas command</description></item><item><title>Submitting a Julia script with Slurm</title><link>https://kevcaz.github.io/notes/2020/05/2020-05-01_submitting_a_julia/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2020/05/2020-05-01_submitting_a_julia/</guid><description>In a previous note, I&amp;rsquo;ve narrated my transition from Mammoth to Graham and I&amp;rsquo;ve exemplified how to submit an job with Slurm. As I&amp;rsquo;m currently using Julia for several projects, I&amp;rsquo;d like to report how I submitted my Julia script to the scheduler.
First of all, I needed to set up Julia for my account. As Graham runs under CentOS and as I had already loaded Julia v1.3.11, I just had to update the version of Julia with module.</description></item><item><title>Julia v1.1-rc1 from source</title><link>https://kevcaz.github.io/notes/2019/01/2019-01-13_julia_v1_1/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2019/01/2019-01-13_julia_v1_1/</guid><description>Learning more about Julia is one of the many things I attempt to do in 2019 &amp;#x1f604;. Few weeks ago, I installed Julia 1.0.0 using the GitHub repository and I decided to checkout how easy it would be to upgrade to the version to v1.1.0-rc1 (note that &amp;ldquo;rc&amp;rdquo; stands for release candidate). It was quite easy, all I had to do was:
git checkout master git pull git checkout v1.1.0-rc1 make 1h13min42sec latter, julia 1.</description></item><item><title>Building Julia 1.0.0 from sources on Debian Testing</title><link>https://kevcaz.github.io/notes/2018/09/2018-09-06_building_julia_1/</link><pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/09/2018-09-06_building_julia_1/</guid><description>You may have already heard about Julia. Well, I am not (yet) a regular user but Julia&amp;rsquo;s performances are impressive, the langage is well-thought and the community is growing super fast, I therefore pay careful attention to what&amp;rsquo;s happening on their side. Recently, version 1.0.0 was released, so I decided to replace my local version v0.4.7.9 I installed with apt-get (note that currently v0.7.0-2 is available for Sid).
There are two ways to install Julia for Debian without apt-get.</description></item></channel></rss>