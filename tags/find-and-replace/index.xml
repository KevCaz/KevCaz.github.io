<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>find and replace on KevCaz's Website</title><link>https://kevcaz.github.io/tags/find-and-replace/</link><description>Recent content in find and replace on KevCaz's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Content under CC0 1.0 Universal unless otherwise specified.</copyright><lastBuildDate>Mon, 24 Sep 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://kevcaz.github.io/tags/find-and-replace/index.xml" rel="self" type="application/rss+xml"/><item><title>Editing manuscripts in Atom</title><link>https://kevcaz.github.io/notes/2018/09/2018-09-24_editing_manuscripts_in/</link><pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/09/2018-09-24_editing_manuscripts_in/</guid><description>I use Atom not only for coding but also for manuscripts editing. It actually makes a ton of sense to me as I write my manuscripts in Markdown and Atom is provided with many powerful features (specific packages, shortcuts, etc.) that once combined make my writing very efficient (I like to think so). Recently, Timoth√©e Poisot shared a very cool setup:
I also enjoy autocomplete-bibtex and document-outline but I often get quite distracted by the preview and prefer working with a very minimalist environment, which is why I like the zen package so much!</description></item><item><title>Use regex mode to efficiently find and replace in a specific folder with Atom</title><link>https://kevcaz.github.io/notes/2018/09/2018-09-17_use_regex_mode/</link><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/09/2018-09-17_use_regex_mode/</guid><description>One specific feature of Atom I like is the &amp;ldquo;find and replace&amp;rdquo; for a specific folder (ctrl+shift+F by default on Debian). It could be extremely powerful when the regex mode is on. Let me give you an example. Yesterday I had to replace all \code{sometext} with 'sometext' which represented dozens of matches in several files. Well, it was not hard at all! All I had to do once the regex mode was on (see where the pointer is on the image below) was to remember the right regex:</description></item></channel></rss>