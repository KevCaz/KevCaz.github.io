<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unix on KevCaz's Website</title><link>https://kevcaz.github.io/tags/unix/</link><description>Recent content in Unix on KevCaz's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Content under CC0 1.0 Universal unless otherwise specified.</copyright><lastBuildDate>Mon, 29 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://kevcaz.github.io/tags/unix/index.xml" rel="self" type="application/rss+xml"/><item><title>Modify and combine a set of files in one</title><link>https://kevcaz.github.io/notes/2018/10/2018-10-29_modify_and_combine/</link><pubDate>Mon, 29 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/10/2018-10-29_modify_and_combine/</guid><description>Today I was looking for a way to combine a set of files in one but before appending a given file, the 2 first lines as well as the last line had to be removed. On Stackoverflow I found a couple of answers (see questions 18006581, 12176492 and 5410757) and based on these I decided to use a combination of head and tail. I ended up creating the following shell script:</description></item><item><title>From one character encoding to another</title><link>https://kevcaz.github.io/notes/2018/10/2018-10-16_from_one_character/</link><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/10/2018-10-16_from_one_character/</guid><description>Today I needed to check the character encoding of a file, I found this page that explains how to do this. Basically the command file will give you the info, for instance:
1 2 $ file example.md example.md: ASCII text options -i for --mime and -b for --brief will give:
1 2 $ file -bi example.md text/plain; charset=us-ascii I figured out that I needed to convert my file from one character encoding to another and so I used iconv.</description></item><item><title>Unzip more than one file</title><link>https://kevcaz.github.io/notes/2018/09/2018-09-25_unzip_more_than/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/09/2018-09-25_unzip_more_than/</guid><description>Few days ago, I was trying to unzip a set of files and it did not work, so I looked up on the internet and found this very detailed post by Chris Jean that explains why
1 unzip path/*.zip gives you an error whereas
1 unzip &amp;#39;path/*.zip&amp;#39; works like a charm!
Thanks Chris!</description></item><item><title>How to count non-blank lines of a set of files?</title><link>https://kevcaz.github.io/notes/2018/09/2018-09-23_how_to_count/</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/2018/09/2018-09-23_how_to_count/</guid><description>Yesterday, I was trying to find a way to count lines of a set of R files without comments nor empty lines and found this answer on stackoverflow:
1 cat R/* | sed &amp;#39;/^\s*#/d;/^\s*$/d&amp;#39; | wc -l Exactly what I needed! A few explanations are in order:
cat reads files sequentially; &amp;quot;|&amp;quot; is the the pipe operator; sed parses and transforms text; wc counts words, lines and more! Basically, counting lines of a file is done with the option -l of wc (option -m for characters, see man wc to learn more):</description></item></channel></rss>