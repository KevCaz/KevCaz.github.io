<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>continuous integration on KevCaz's Website</title><link>https://kevcaz.github.io/tags/continuous-integration/</link><description>Recent content in continuous integration on KevCaz's Website</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Content under CC0 1.0 Universal unless otherwise specified.</copyright><lastBuildDate>Sun, 12 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kevcaz.github.io/tags/continuous-integration/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy a pkgdown website on gh-pages manually</title><link>https://kevcaz.github.io/notes/ci/deploypkgdown2/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/deploypkgdown2/</guid><description>This is another note about deploying a pkgdown1 website with Travis on gh-pages. I had previously used the package travis but I was recently interested in doing so manually. Fortunately, I found this very helpful walk-through by GÃ¡bor CsÃ¡rdi2. I used it and it worked well for a while, but at some point I had an issue with the deployment part (still not sure why), so I changed it. Instead of using the following config3</description></item><item><title>Generate a ssh key with R</title><link>https://kevcaz.github.io/notes/security/keygen_withr/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/security/keygen_withr/</guid><description>I now frequently use GitHub actions to deploy websites on gh-pages. One way to do so requires to use a ssh key (the full procedure is well explained, inter alia, in the README of peaceiris/actions-gh-pages). As I am used to work with the Terminal, when I need such a key, I use the following command line:
1 $ ssh-keygen -t rsa -b 4096 -C &amp;#34;$(git config user.email)&amp;#34; -f gh-pages -N &amp;#34;&amp;#34; which generates two files:</description></item><item><title>GitHub actions, checkout and submodule</title><link>https://kevcaz.github.io/notes/ci/ghaction2/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/ghaction2/</guid><description>I now use GitHub Actions to deploy this website (see my previous note about it) and last Monday (two days ago ðŸ˜ƒ) after I pushed I got an email saying the deployment failed and found the following error message in the console log:
1 ##[error]The input &amp;#39;submodules&amp;#39; is not supported in actions/checkout@v2 Turns out this is because version 2 of checkout does not support submodule yet (see this issue report https://github.</description></item><item><title>My first workflow with GitHub Actions</title><link>https://kevcaz.github.io/notes/ci/githubactions/</link><pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/githubactions/</guid><description>As explained on GitHub:
GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.
I&amp;rsquo;ve heard about this feature and I decided to give it a first go yesterday as I wanted to deploy a notebook for the McCann Lab&amp;rsquo;s Theory Club built with bookdown.</description></item><item><title>Deploy a pkgdown on gh-pages</title><link>https://kevcaz.github.io/notes/ci/deploypkgdown/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/deploypkgdown/</guid><description>There are three ways to deploy a website on your GitHub pages :
using the gh-pages; using the folder docs on your master branch; using the master branch. I frequently use the GitHub pages to deploy the pkgdown websites I create for my R packages. For a while, I was using the docs/ folder where the website is generated by default. But I figured that this way has two main drawbacks:</description></item><item><title>Reasonably complex matrix build with Travis</title><link>https://kevcaz.github.io/notes/ci/travismatrix/</link><pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/travismatrix/</guid><description>Matrix build is a very powerful feature of Travis CI: it allows you to define a list of custom environments wherein your software will be built. For instead, I check rcites on 4 different environments (note that Travis offers 3 different Ubuntu version, several MacOSX images and that the support for Windows is in early stage).
A few days ago, the matrix build I used for another R ðŸ“¦ failed with the following error (see https://travis-ci.</description></item><item><title>Sent your R package to package builder via devtools</title><link>https://kevcaz.github.io/notes/r/new_builders/</link><pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/r/new_builders/</guid><description>As I was sending a minor patch to rcites, I use devtools::build_win() and got the following warning message:
Warning message: &amp;#39;devtools::build_win&amp;#39; is deprecated. And the message suggested to check out check_win_*, and I so did a quick check:
1 R&amp;gt; devtools::check once tab typed, the following function names were prompted:
1 2 3 4 devtools::check_built devtools::check_cran devtools::check_win_oldrelease devtools::check_man devtools::check devtools::check_win_release devtools::check_win_devel devtools::check_dep_version devtools::check_failures devtools::check_rhub We now have access to rhub via devtools, that&amp;rsquo;s neat ðŸŽ†!</description></item><item><title>Run your jobs one by one on Travis!</title><link>https://kevcaz.github.io/notes/ci/runjobs1by1/</link><pubDate>Mon, 19 Nov 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/runjobs1by1/</guid><description>I now test rcites for 4 configurations on Travis so Travis runs 4 jobs. For a while, I was running all the jobs at once, and as rcites is R-client for a web API, many of the jobs failed because of the well-known error 429:
Too Many Requests (RFC 6585) (HTTP 429).
I always ended restarting some jobs, I coped with it. At some point, I stepped back and thought: &amp;ldquo;people people behind Travis are smart, so they should have thought about limiting concurrent jobs&amp;rdquo;.</description></item><item><title>rcites code coverage dropped to 0</title><link>https://kevcaz.github.io/notes/ci/zerocodecoverage/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/zerocodecoverage/</guid><description>We (a couple of colleagues and myself) are currently finishing a major release for our R package rcites. After adding the latest feature I have been working on via a pull request, I messed up with my local master branch and overwrite/delete some files ðŸ˜ . I thought it was not a big deal as all of them were files created/edited when the package is built (well, I thought so). But after the very next push, the code coverage weirdly dropped to zero ðŸ˜±.</description></item><item><title>Let AppVeyor watch inSileco!</title><link>https://kevcaz.github.io/notes/ci/blogdownappveyor/</link><pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate><guid>https://kevcaz.github.io/notes/ci/blogdownappveyor/</guid><description>I very much enjoy sharing thoughts and code on our blog inSileco. Recently, one of the authors mentioned that he was not able to clone the repository on his Windows machine. I came to realize that we better not assume that everybody is working on MacOS or Linux and check that inSileco works well on Windows. One of the most convenient way to do so is to use AppVeyor and I therefore decided to spend some time making the build passed on AppVeyor!</description></item></channel></rss>